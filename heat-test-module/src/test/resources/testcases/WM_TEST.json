{
  "testSuite": {
    "generalSettings": {
      "suiteDesc": "Example Flow Mode Tests",
      "flowMode": "true"
    },
    "beforeTestSuite": {
      "WM_REQUESTS" : "beforeTestSuite_value"
    },
    "testCases": [
      {
        "testId": "001",
        "testName": "Test that __admin/requests returns 0",
        "e2eFlowSteps": [
          {
            "objectName": "Test that __admin/requests returns 0",
            "stepNumber": "1",
            "beforeStep" : {
              "WM_RESET" : "${wiremock[WM_INSTANCE].reset}",
              "WM_REQUESTS" : "${wiremock[WM_INSTANCE].requests}"
            },
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Check that WM_REQUESTS meta.total value is 0",
                  "actualValue": "${preload[WM_REQUESTS].get(total)}",
                  "expectedValue": "0"
                }
              ]
            }
          }
        ]
      },
      {
        "testId": "002",
        "testName": "Test that preloaded variables in beforeTestSuite still work",
        "e2eFlowSteps": [
          {
            "objectName": "Test that preloaded variables in beforeTestSuite still work",
            "stepNumber": "1",
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Preload test Suite variable is not overrided",
                  "actualValue": "${preload[WM_REQUESTS]}",
                  "expectedValue": "beforeTestSuite_value"
                }
              ]
            }
          }
        ]
      },
      {
        "testId": "003",
        "testName": "Test that beforeStep is executed after previous step",
        "e2eFlowSteps": [
          {
            "objectName": "set beforeStep var = 1",
            "stepNumber": "1",
            "beforeStep" : {
              "WM_REQUESTS" : "1"
            },
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Check beforeStep var",
                  "actualValue": "${preload[WM_REQUESTS]}",
                  "expectedValue": "1"
                }
              ]
            }
          },
          {
            "objectName": "set beforeStep var = 2",
            "stepNumber": "2",
            "beforeStep" : {
              "WM_REQUESTS" : "2"
            },
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Check beforeStep var",
                  "actualValue": "${preload[WM_REQUESTS]}",
                  "expectedValue": "2"
                }
              ]
            }
          },
          {
            "objectName": "NO set beforeStep, using the default in before test suite",
            "stepNumber": "3",
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Check beforeStep var",
                  "actualValue": "${preload[WM_REQUESTS]}",
                  "expectedValue": "beforeTestSuite_value"
                }
              ]
            }
          }
        ]
      },
      {
        "testId": "004",
        "testName": "Test behaviour of ${path and ${path[$preload with 1 param",
        "e2eFlowSteps": [
          {
            "objectName": "Test behaviour of ${path and ${path[$preload",
            "stepNumber": "1",
            "beforeStep" : {
              "WM_RESET" : "${wiremock[WM_INSTANCE].reset}",
              "WM_REQUESTS" : "${wiremock[WM_INSTANCE].requests}"
            },
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/__admin/requests",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "200",
              "fieldCheck": [
                {
                  "description": "Check ${path[requestJournalDisabled]}",
                  "actualValue": "${path[requestJournalDisabled]}",
                  "expectedValue": "false"
                },
                {
                  "description": "Check that WM_REQUESTS.get(total) returns",
                  "actualValue": "${path[${preload(WM_REQUESTS).get(total)]}",
                  "expectedValue": "0"
                }
              ]
            }
          }
        ]
      },
      {
        "testId": "005",
        "testName": "Test behaviour of ${path with 2 param",
        "e2eFlowSteps": [
          {
            "objectName": "Test behaviour of ${path and ${path[$preload",
            "stepNumber": "1",
            "beforeStep" : {
              "WM_RESET" : "${wiremock[WM_INSTANCE].reset}",
              "WM_REQUESTS" : "${wiremock[WM_INSTANCE].requests}"
            },
            "webappName": "WM_INSTANCE",
            "httpMethod": "GET",
            "url": "/pippo",
            "queryParameters": {},
            "headers": {},
            "expects": {
              "responseCode": "404",
              "fieldCheck": [
                {
                  "description": "Check that WM_REQUESTS.get(total) returns",
                  "actualValue": "${path[${preload(WM_REQUESTS)},requestJournalDisabled]}",
                  "expectedValue": "false"
                }
              ]
            }
          }
        ]
      }
    ]
  }
}
